@startuml
autonumber

participant "ro:OrganizationRegistration" as OR
participant "orgList:List<Organization>" as LSTORG
participant "org:Organization" as ORG
participant "trans:PaymentTransactionList" as TLIST
participant "ListTransactions:List<PaymentTransaction>" as LIST
participant "transaction:PaymentTransaction" as TRA
participant "task:Task" as T
participant "taskExec:TaskExecution" as TE
participant "free:Freelancer" as FREEL
participant ":Calendar" as CAL
participant "date: Date " as DT
participant "calendar:Calendar" as CALD
participant "now:Calendar" as CALN


[o-> OR: getMean(id)
activate OR

OR -> OR: orgList=getOrganizationsList()
OR -> OR : cont = 0
OR -> OR : delaysSum = 0

OR -> CAL : now=getInstance()
activate CAL
deactivate CAL

OR -> CAL : calendar=getInstance()
activate CAL
deactivate CAL

loop [ For each Organization ]

OR -> LSTORG : org = get(z)
activate  LSTORG
deactivate LSTORG

OR -> ORG : trans = getPaymentTransactionsList()

activate  ORG
deactivate ORG

OR ->TLIST : ListTransactions = getPaymentTransactions()

activate  TLIST
deactivate TLIST

loop [ For each transaction ]

OR -> LIST : transaction = get(y)

activate  LIST
deactivate LIST

OR -> TRA : free=getFreelancer()
activate  TRA
deactivate TRA

OR -> FREEL: idFree=getId()
activate  FREEL
deactivate FREEL

opt [ id.equals(idFree) ]

OR -> TRA : task = getTask()
activate TRA
deactivate TRA

OR -> T : taskExec = getTaskExecution()
activate T
deactivate T

OR -> TE : delay=getDelay()
activate TE
deactivate TE

OR -> TE : date=getDate()
activate TE
deactivate TE

OR -> CALD : setTime(date)
activate CALD
deactivate CALD

opt [ (calendar.get(Calendar.YEAR)) == (now.get(Calendar.YEAR)) ]

OR -> OR : delaysSum=delaysSum+delay

OR -> OR : cont++

end loop
end loop
end loop
end


OR -> OR : mean=delaysSum/cont

<-- OR : mean
deactivate OR

@enduml
