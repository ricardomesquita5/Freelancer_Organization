@startuml
autonumber
'hide footbox
actor "Collaborator of the Organization" as CO

participant ":PaymentTransactionUI" as UI
participant ":PaymentTransactionController" as CTRL
participant "AplicacaoPOT" as _APP
participant "app\n:AplicacaoPOT" as APP
participant "session\n:UserSession" as SESSAO
participant ":Platform" as PLAT
participant "rorgs\n:OrganizationsRegister" as RORGS
participant "org\n:Organization" as ORG
participant "tl\n:TasksList" as LTASKS
participant "ptl\n:PaymentTransactionList" as PTL
participant "payTrans\n:PaymentTransaction" as PT
participant "rfr\n:FreelancersRegister" as RF
participant "task\n:Task" as TAS
participant "taskEx\n:TaskExecution" as TASE
participant "freel\n:Freelancer" as FREE
participant "lfree\n:List<Freelancer>" as LFREE
participant "ltask\n:List<Task>" as LTA

activate CO
CO -> UI : Starts the creation of a payment transaction.
activate UI

UI -> CTRL : lfree =  getListOfFreelancers()
activate CTRL
CTRL -> PLAT : rfr = getFreelancerRegister()
activate PLAT
deactivate PLAT

CTRL -> RF : lfree = getListOfFreelancers()
activate RF
deactivate RF
deactivate CTRL

UI --> CO : Displays a list of freelancers and asks the collaborator of the organization to select one.
deactivate UI



CO -> UI : Selects one.
activate UI

UI -> CTRL : ltask =  getListOfTasks()
activate CTRL
CTRL -> _APP: app = getInstance()
activate _APP
deactivate _APP

CTRL -> APP: session = getCurrentSession()
activate APP
deactivate APP

CTRL -> SESSAO: email = getUserEmail()
activate SESSAO
deactivate SESSAO

CTRL -> PLAT: rorgs = getRegisterOrganizations()
activate PLAT
deactivate PLAT

CTRL -> RORGS: org = getOrganizationByUserEmail(email)
activate RORGS
deactivate RORGS

CTRL -> ORG: tl = getTasksList()
activate ORG
deactivate ORG

CTRL -> ORG: ptl = getPaymentTransactionList()
activate ORG
deactivate ORG

CTRL -> LTASKS : ltask =  getListOfTasks()
activate LTASKS
deactivate LTASKS
deactivate CTRL

UI --> CO : Displays a list of tasks and asks the collaborator of the organization to select one.
deactivate UI



CO -> UI : Selects one.
activate UI

UI --> CO : Requests details about the execution of the task (end date, delay, brief description of the quality of the work) and one ID.
deactivate UI



CO -> UI : Enters the requested data
activate UI

UI -> CTRL : setData(taskEnd, taskDelay, taskDescWork, freelId, taskId)
activate CTRL
CTRL -> RF : freel = getFreelancerById(freelId)
activate RF
deactivate RF
CTRL -> LTASKS : task = getTaskById(taskId)
activate LTASKS
deactivate LTASKS

CTRL -> TAS : taskEx = newTaskExecution(taskEnd,taskDelay,taskDescWork)
activate TAS
TAS -> TASE** : create(taskEnd,taskDelay,taskDescWork)
deactivate FREE
deactivate TAS

OPT [ taskDelay > 0 ]
CTRL -> FREE : setAnualDelay(taskDelay)
activate FREE
end OPT
deactivate FREE
CTRL -> FREE : incrementTask()
activate FREE
deactivate FREE

deactivate CTRL
UI -> CTRL : newPaymentTransaction(id)
activate CTRL

CTRL -> PTL : newPaymentTransaction(id,freel,task)
activate PTL
PTL -> PT** : create(id, freel, task)
deactivate PTL
CTRL -> PTL : validatePaymentTransaction(payTrans)
activate PTL
deactivate PTL
deactivate CTRL

UI --> CO : Displays the data, asking you to confirm it
deactivate UI

CO -> UI : confirms
activate UI
UI -> CTRL : registerPaymentTransaction()
activate CTRL
CTRL -> PTL : registerPaymentTransaction(payTrans)
activate PTL
PTL -> PTL : validatePaymentTransaction(payTrans)
PTL -> PTL : addPaymentTransaction(payTrans)
UI --> CO : Informs about the success of the operation
deactivate PTL
deactivate CTRL
deactivate UI

deactivate CO

@enduml
